---
# MongoDB ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mongodb-sa
  namespace: mongodb
---
# MongoDB Secret
apiVersion: v1
kind: Secret
metadata:
  name: mongodb
  namespace: mongodb
  labels:
    app: mongodb
    release: mongodb
type: Opaque
data:
  # Base64 encoded passwords - these are example values, should be changed in production
  rootPassword: "TW9uZ29EQjEyMyE="  # MongoDB123!
  username: "bW9uZ29kYg=="  # mongodb
  password: "TW9uZ29EQjEyMyE="  # MongoDB123!
  database: "YXBwZGI="  # appdb
---
# MongoDB ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-config
  namespace: mongodb
  labels:
    app: mongodb
    release: mongodb
data:
  mongod.conf: |
    # mongod.conf
    storage:
      dbPath: /data/db
      # journal:
      #   enabled: true
    systemLog:
      destination: file
      logAppend: true
      path: /var/log/mongodb/mongod.log
    net:
      port: 27017
      bindIp: 0.0.0.0
    security:
      authorization: enabled
    operationProfiling:
      mode: slowOp
      slowOpThresholdMs: 100
---
# MongoDB PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb
  namespace: mongodb
  labels:
    app: mongodb
    release: mongodb
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: local-path
---
# MongoDB Service
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: mongodb
  labels:
    app: mongodb
    release: mongodb
    monitoring: "true"
spec:
  type: ClusterIP
  ports:
    - name: mongodb
      port: 27017
      protocol: TCP
      targetPort: 27017
  selector:
    app: mongodb
    release: mongodb
---
# MongoDB Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: mongodb
  labels:
    app: mongodb
    release: mongodb
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: mongodb
      release: mongodb
  template:
    metadata:
      name: mongodb
      labels:
        app: mongodb
        release: mongodb
      annotations:
        checksum/config: "config-hash-placeholder"
        checksum/secrets: "secrets-hash-placeholder"
    spec:
      securityContext:
        fsGroup: 999
        runAsGroup: 999
        runAsUser: 999
      serviceAccountName: mongodb-sa
      containers:
        - name: mongodb
          image: mongo:7.0
          imagePullPolicy: IfNotPresent
          command:
            - mongod
            - --config=/etc/mongodb/mongod.conf
          ports:
            - name: mongodb
              containerPort: 27017
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongodb
                  key: username
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb
                  key: rootPassword
            - name: MONGO_INITDB_DATABASE
              valueFrom:
                secretKeyRef:
                  name: mongodb
                  key: database
          volumeMounts:
            - name: mongodb-data
              mountPath: /data/db
            - name: mongodb-config
              mountPath: /etc/mongodb
              readOnly: true
            - name: mongodb-logs
              mountPath: /var/log/mongodb
          resources:
            requests:
              memory: 512Mi
              cpu: 250m
            limits:
              memory: 1Gi
              cpu: 500m
          livenessProbe:
            exec:
              command:
                - mongosh
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - mongosh
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
      volumes:
        - name: mongodb-data
          persistentVolumeClaim:
            claimName: mongodb
        - name: mongodb-config
          configMap:
            name: mongodb-config
        - name: mongodb-logs
          emptyDir: {}
---
# MongoDB Init Job
apiVersion: batch/v1
kind: Job
metadata:
  name: mongodb-init
  namespace: mongodb
  labels:
    app: mongodb-init
    release: mongodb
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  template:
    metadata:
      labels:
        app: mongodb-init
        release: mongodb
    spec:
      restartPolicy: OnFailure
      serviceAccountName: mongodb-sa
      containers:
        - name: mongodb-init
          image: mongo:7.0
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -c
            - |
              # Wait for MongoDB to be ready
              echo "Waiting for MongoDB to be ready..."
              until mongosh --host mongodb --port 27017 --username $MONGO_ROOT_USERNAME --password $MONGO_ROOT_PASSWORD --authenticationDatabase admin --eval "db.adminCommand('ping')" > /dev/null 2>&1; do
                echo "MongoDB not ready yet, waiting..."
                sleep 5
              done
              
              # Create application user and database
              echo "Creating application user and database..."
              mongosh --host mongodb --port 27017 --username $MONGO_ROOT_USERNAME --password $MONGO_ROOT_PASSWORD --authenticationDatabase admin --eval "
                use $MONGO_DATABASE;
                db.createUser({
                  user: '$MONGO_USERNAME',
                  pwd: '$MONGO_PASSWORD',
                  roles: [
                    { role: 'readWrite', db: '$MONGO_DATABASE' },
                    { role: 'dbAdmin', db: '$MONGO_DATABASE' }
                  ]
                });
                db.createCollection('test');
                print('MongoDB initialization completed successfully');
              "
          env:
            - name: MONGO_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongodb
                  key: username
            - name: MONGO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb
                  key: rootPassword
            - name: MONGO_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongodb
                  key: username
            - name: MONGO_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb
                  key: password
            - name: MONGO_DATABASE
              valueFrom:
                secretKeyRef:
                  name: mongodb
                  key: database
          resources:
            requests:
              memory: 128Mi
              cpu: 100m
            limits:
              memory: 256Mi
              cpu: 200m 